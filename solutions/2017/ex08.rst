EX08 lahendus
=============

**Backend**

Antud ülesandes tuleb realiseerida kaks klassi - Square ja Board. Board klass iseloomustab malelauda ning Square klass, omakorda, 
ühte ruutu antud malelaual.
Mõlemal klassil on privaatsed konstruktorid, ehk otseselt pole võimalik nendest objekte luua (välja arvatud olukord, kui 
teeme Square või Board objekti selles samas klassis).


.. code-block:: java
    
    // Viskavad vastavat veateadet: Constructor has private access
    Square s = new Square("c7");
    Board b = new Board(8, 8);


1. Square

Square klassil on kaks konstruktori - esimene võtab ette stringi (notation), mis iseloomustab selle ruudu asukohta malelaual. Ehk, notation võiks olla näiteks "c7", "a2" jne. Teine võtab ette malelaua x ja y koordinaate.
Nagu alati, salvestame konstruktorisse ette antud väärtuse enne loodud välisse (field).

.. code-block:: java

    private String notation;

    private Square(String notation) { this.notation = notation; }

    // Sama asi teise konstruktoriga

Nüüd tuleb relaliseerida kaks erinevat staatilist (static) meetodit, mis kutsuvad vastava kontsruktori ja loovad objekti.
Staatilised meetodid on iseseisvad, mis tähendab see, et nad ei sõltu objektidest ja neid saab kutsuda ilma objekti loomiseta.
Antud ülesandes oleks võimalik teha erinevad meetodid erineva nimega, ja sel korral ühte kasutaksime siis, kui on ette antud notation, 
ja teist - kui koordinadid. See näeks välja umbes nii:


.. code-block:: java
    
    public static Square createSquareByNotation(String notation) {
        return new Square(notation);
    }
    
    public static Square createSquareByXY(int x, int y) {
        return new Square(x, y);
    }
    
    Siis:
    Square s1 = Square.createSquareByNotation("c7");
    Square s2 = Square.createSquareByXY(0, 0);
    

Kuid see oleks mahukas ja ebapraktiline. Õnneks on Javas selline asi nagu ülelaadimine (method overload), mis võimaldab kasutada meetodeid sama nimega, mis võtavad ette erinevaid argumente.


.. code-block:: java
    
    public static Square of(String notation) {
        return new Square(notation);
    }
    
    public static Square of(int x, int y) {
        return new Square(x, y);
    }
   
    Siis:
    Square s1 = Square.of("c7");
    Square s2 = Square.of(0, 0);

Tuleb arvestada ka seda, et Square objektil peavad alati olema notation, x, y. Ehk juhul, kui me loome objekti näiteks notation'i
kasutades, tuleb sealt ekstraheerida ka x ja y koordinaate:


.. code-block:: java

    public class Square {
    
        /** Konstant, mis iseloomustab inglise alphabeeti stringi kujul. */
        private static final String LETTERS = "abcdefghijklmnopqrstuvwxyz";

        private int x;
        private int y;

        public static void main(String[] args) {
            Square s = Square.of("c7");
        }

        public static Square of(String notation) {
        
            // notation = "c7"
            Square s = new Square(notation);
            
            // 'c'
            char letter = notation.charAt(0);
            
            // '7'
            char digit = notation.charAt(1);
            
            // 2
            s.x = LETTERS.indexOf(letter);
            
            // On vaja ühte lahutada, kuna meie x ja y koordinadid algavad 0-st. 
            // Malelaual koordinatide arvutamine algab 1-st.
            // 6
            s.y = Integer.valueOf(digit) - 1;
            return s;
        }
        // Ja samamoodi teise meetodiga
    }

Sellega Square klass on valmis.


2. Board

Board klassi puhul samamoodi kasutame staatilist meetodit objekti loomiseks. Siin pole midagi uut.
Antud klassil on olemas spetsiaalne väli - knight - mis iseloomustab Square klassi objekti, mille peal praegu asub meie ratsu.
Klass Board peab võimaldama lisada juurde ühte ratsut ja paigutada seda ümber vastavalt malereeglitele (ratsu alati läheb "Г" tähega).


.. code-block:: java

    public class Board {
    
        private int height;
        private int width;
        private Square knight;
        
        private Board(int width, int height) {
            this.width = width;
            this.height = height;
        }
        
        public static Board of(int width, int height) { ... }

        public boolean addKnight(Square square) {
        
            if ( kontrollime, kas ette antud objekt (square) on malelaua piiride sees ja ei võrdu null-iga ) {
                knight = square;
            }
            
            // Kui asendus on tehtud, knight võrdub viitega uuele Square objektile ja ei ole rohkem null
            return knight != null;
        }

        public boolean moveKnightTo(Square square) {
        
            // Siin kontrollime, kas ette antud ruut on see, kuhu ratsu saab minna
            if ( saab küll ) {
                knight = square;
                return true;
            }
            
            // Vastasel juhul
            return false;
        }

Ja siis ongi backend'iga kõik.


**Frontend**

Alustame sellest, et meil on vaja malelauda, kuhu ratsu saaks paigutada. Kõige lihtsam on kasutada selleks JavaFX-ile sisse ehitatud klassi Rectangle. Aga alustame algusest.

Esialgu teeme valmis GridPane: seda tuleks jaotada ristkülikudeks, mille sisse pärast paneme Rectangle objekte. Niiet tuleb välja selline võrk, mis koosneb 8*8 = 64 ristkülikudest. Ma tegin seda SceneBuilderiga, kuid saab ka teha nö elegentsem:

.. code-block:: java
    
    // Suvaline arv
    int width = 80;
    Pane pane = new GridPane();
    
    for (int i = 0; i < 8; i++) {
        pane.getRowConstraints().add(new RowConstraints(width));
        pane.getColumnConstraints().add(new ColumnConstraints(width));
    }

Nüüd saab lisada tühjadesse ristkülikudesse meie Pane'il Rectangle objekte ja kohe värvida neid ära. Seda tegevust on lihtsam jagada kaheks meetodiks.
Esmese meetodi sees teeme massiivi, mis iseloomustab meie võrgu. Ehk, massiv, milles on sama palju elemente, nagu ristkülikke meie paneelis - 64. Massivi elementideks on ainult ühed ja nullid, kus 1 tähendab, et ristküliku värv on valge ja 0 tähendab, et värv on... hm... roosa?

Niiet:


.. code-block:: java
    
    public int[] setGrid() {
    
        // Indeks, mille abil määrame ristküliku värvi
        int j = 0;
        
        // Meie peame vahetama värvimise järjekorda igas uues reas
        boolean switchColors = false;
        
        int[] grid = new int[width * height];

        for (int i = 0; i < grid.length; i++) {
            // Iga paaris ristkülik on valge
            if (switchColors) {
                if (j % 2 == 0) {
                    grid[i] = 1;
                } else {
                    grid[i] = 0;
                }
              // Iga paaritu ristkülik on valge
              } else {
                 if (j % 2 == 0) {
                    grid[i] = 0;
                 } else {
                    grid[i] = 1;
            }
            ++j;

            // Peame nullima indeksi siis, kui rida lõppeb ja alustada uuesti
            // Saab teha ka ilma selleta (ilma j indeksita)
            // Kuid siis tuleb kasutada kahedimensioonilise massiivi (two-dimensional array: int[][])
            // Ning kaks for-tsükli.
            if (j == width) {
                j = 0;
                // Iga kord vahetame värvimise järjekorda
                switchColors = grid[i] % 2 != 0;
            }
        }
        return grid;
    }

Natuke mahukas, eks? Teeme ilusamaks:


.. code-block:: java
    
    public int[] setGrid() {
        int j = 0;
        boolean switchColors = false;
        int[] grid = new int[width * height];
        for (int i = 0; i < grid.length; i++) {
            grid[i] = switchColors ? (j % 2 == 0 ? 1 : 0) : (j % 2 == 0 ? 0 : 1);
            ++j;
            if (j == width) {
                j = 0;
                switchColors = grid[i] % 2 != 0;
            }
        }
        return grid;
    }

Nüüd tuleb lisada meie paneelile vastavate värvidega ristkülikke. Selleks loome lihtsa meetodi:


.. code-block:: java
    
    private Board b = Board.of(8, 8);
    
    private void drawBoard() {
        
        int[] grid = setGrid();
        
        // Koordinaadid
        int x = 0;
        
        // Alustame alt
        int y = b.getHeight() - 1;
        
        // Ristküliku suurus
        int squareSize = 80;
        
        for (int cell : grid) {
        
            // Ristkülik laiusega ja pikkusega 80
            Rectangle rect = new Rectangle(0, 0, squareSize, squareSize);
            
            // Border color
            rect.setStroke(Color.BLACK);
            
            if (cell == 0) {
                rect.setFill(Color.BLACK);
            } else {
                rect.setFill(Color.WHITE);
            }
            pane.add(rect, x, y);
            ++x;
            if (x == b.getWidth() - 1) {
                x = 0;
                --y;
            }
        }
    }

Meil on malelaud ilusti olemas. Nüüd on vaja teha rakenduse kasutajale võimalikuks ratsut lisada.


.. code-block:: java

    private void addKnight() {
        int boardSize = 8;
        // Ratsu peab olema lisatud suvalisse kohta
        int randomX = ThreadLocalRandom.current().nextInt(0, boardSize);
        int randomY = ThreadLocalRandom.current().nextInt(0, boardSize);
        
        // Defineerime pilti
        ImageView knight = new ImageView(new Image(getClass().getResourceAsStream("knight.png")));
        
        // Kui ratsut malelaual veel ei ole, lisame juurde
        if (b.getKnightSquare() == null) {
            b.addKnight(Square.of(randomX, randomY));
            pane.add(knight, randomX, randomY);
        } else {
        
            // Kui on, võtame maha
            for (Node image : pane.getChildren()) {
                if (image instanceof ImageView) {
                    pane.getChildren().remove(image);
                    break;
                }
            }
            
            // Ja lisame uuesti
            b.addKnight(Square.of(randomX, randomY));
            pane.add(knight, randomX, randomY);
        }
    }
 
Jääbki ainult üks asi tegemata: juhul, kui kasutaja klikkib malelaua asuvale ruudule peal, peab meie ratsu käiku tegema (kui see vastab malereeglitele). Selleks teeme esialgu funktsiooni, mis kontrollib, kas valitud ruudule saab käiku teha ja kui saab, siis seda tehakse.


.. code-block:: java

    private void relocate(int x, int y) {
        if (b.moveKnightTo(Square.of(x, y))) {
            for (Node image : pane.getChildren()) {
                if (image instanceof ImageView) {
                    pane.getChildren().remove(image);
                    break;
                }
            }
            // ImageView knight
            pane.add(knight, x, y);
        } 
    }
    
    // Ja siis lisame ka funktsiooni, mis võtab ette klikki koordinaadid
    // Ja vaatab, mis asukoht Pane'il vastab antud ristküliku koordinaatidele, mille peale kasutaja klikkis
    private void mouseHandler(double boundX, double boundY) {
        int x = 0;
        int y = 0;
        for (Node rect : pane.getChildren()) {
        
            // Kui see on Rectangle ja boundX ja boundY on selle piiride sees
            if (rect instanceof Rectangle && rect.getBoundsInParent().contains(boundX, boundY)) {
            
                // Saame koordinaadid
                x = GridPane.getColumnIndex(rect);
                y = GridPane.getRowIndex(rect);
                break;
            }
        }
        // Ja siis kutsume relocate() meetodi
        relocate(x, y);
    }

Aga ärge unustage, et mouseHandler() peab olema käivitatud iga kord kui kasutaja klikkib paneeli peale:


.. code-block:: java

    pane.setOnMouseClicked(ev -> mouseHandler(ev.getX(), ev.getY()));

Sellega ongi kõik. Muidugi on vaja ka lisada nuppu, mille peale vajutades ratsu lisadakse lauale ja ka see, et kui on valitud ruut, kuhu ratsu minna ei saa, siis seda värvidakse punaseks. Aga seda on päris lihtne teha ja mõttetu eraldi katta.
