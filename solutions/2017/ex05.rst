EX05 lahendus
=============

Eesmärk
-------------------
Luua laulu objekte ja lisada neid albumi objektile


Antud ülesandes tuleb realiseerida üsna palju meetodeid. Kui olete natukenegi OOP-i põhimõtetega kokku puutunud, siis ei tohiks enamus neist probleemiks olla. Peatuks aga kolmel meetodil, mis võivad raskusi tekitada ja mida ei saa lahendada ainult paari reaga.

Esimene neist oleks meetod setLength() Song objektil. Ette antud laulu pikkus peab olema õiges formaadis(mm:ss, mm:s, m:ss või m:s) ja String andmetüüpi. Selleks oleks mõistlik kohe alguses kontrollida, kas etteantud pikkus on õige. Tuleb kontrollida, et length ei oleks null ja et laul ei kestaks vähem kui sekund(kõigis 4-s formaadis). Lõpuks kontrollida, et ega mingit muud jama ette ei anta. Seda on lihtne teha regulaaravaldisega(regular expression). Kui regulaaravaldistest midagi kuulnud pole, siis tasuks uurida, võib tulevikus kasu olla valideerimist puudutavates ülesannetes :)
Lühidalt on siis tegu mingi patterniga, mida antud sõne peab jälgima.

Lõpuks kasutame SimpleDateFormatit, et length convertida kujule mm:ss. See säästab edasipidi palju peavalu.

.. code-block:: java

    public void setLength(String length) {
        if (length == null  || length.equals("00:00") || length.equals("0:00") || length.equals("0:0")
                || length.equals("00:0") || !length.matches("^(([0-5]?\\d):)([0-5]?\\d)$")) {
            return;
        }
        try {
            SimpleDateFormat df = new SimpleDateFormat("mm:ss");
            Date time = df.parse(length);
            this.length = df.format(time);
        } catch (ParseException e) {
            return;
        }
    }
    
Järgmiseks vaataks meetodit isReady() Song objektil. Siin on vaja kontrollida, et kõne all oleval Song objektil oleks vähemalt üks autor, oleks pealkiri ja et pikkus oleks antud ja õiges formaadis. Kuna isReady() meetod ise tagastab booleani, siis oleks mõistlik luua meetodi sees 3 booleani, mis ütlevad kas meie 3 tingimust on täidetud. Tingimuste kontrolliks piisab 3-st if-lausest mis vaatavad, et ega meie 3 väärtust nullid või tühjad pole:

.. code-block:: java

    public boolean isReady() {
        boolean authorsExist = true;
        boolean titleExists = true;
        boolean lengthValid = true;

        if (authors == null || authors.isEmpty()) {
            authorsExist = false;
        }
        if (getTitle() == null || getTitle().isEmpty()) {
            titleExists = false;
        }
        if (getLength() == null || getLength().isEmpty()) {
            lengthValid = false;
        }
        return authorsExist && titleExists && lengthValid;
    }
    
    
Viimasena vaataks Album objekti meetodit release(). Siin tuleb kontrollida, kas album on levituseks valmis. Kohe alguses vaatame, kas žanr on olemas, kas pealkiri on olemas ja et ega laulude list tühi pole. Edasi käime laulude listi for tsükliga üle, vaadates kas iga laul on valmis. Kui kõik on valmis, siis anname ennem loodud booleanile allSongsReady tõese väärtuse. Kui laulude listis on 5 valmis lugu, saame edasi minna albumi pikkuse arvutamise juurde. Kuna laulu pikkus oli meil antud sõnena, siis tuleb siin natuke convertimistega mängida. Kuna me ennem convertisime kõik laulu pikkused formaati mm:ss, siis on edasine kõvasti lihtsam. 

Kõigepealt vaatame, palju iga laulu pikkuse sekundite osa meie albumi pikkust suurendab. Sekundi osa saame kätte substringiga. Liidame kõik sekundiosad kokku, suurendades minutite muutujat, kui sekundid üle 60-ne lähevad. Kui see tehtud, siis lihtsalt liidame kõik minutite osad juurde ja saamegi albumi kogupikkuse. Kui nüüd on kõik tingimused täidetud, saame returnida true. 

.. code-block:: java
    
    public boolean release() {
        int minutes = 0;
        int seconds = 0;
        boolean allSongsReady = false;
        int count = 0;

        if (trackListing == null || genre == null || title == null || trackListing.isEmpty()) {
            return false;
        }

        for (int i = 0; i < trackListing.size(); i++) {
            if (trackListing.get(i).isReady()) {
                count++;
            }
        }

        if (count == trackListing.size()) {
            allSongsReady = true;
        }

        if ((trackListing.size() >= minimumAmountOfSongs) && allSongsReady) {
            for (int i = 0; i < trackListing.size(); i++) {
                if (trackListing.get(i).getLength().substring(3) == "00") {
                    continue;
                }
                seconds += Integer.parseInt(trackListing.get(i).getLength().substring(3));
                if (seconds >= 60) {
                    minutes++;
                    seconds = 0;
                }
            }
            for (int i = 0; i < trackListing.size(); i++) {
                minutes += Integer.parseInt(trackListing.get(i).getLength().substring(0, 2));
            }

            if (minutes >= minimumMinutes && !title.equals("") && !genre.equals("")) {
                return true;
            }

        }
        return false;
    }
