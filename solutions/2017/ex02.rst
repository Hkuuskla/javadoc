EX02 lahendus
=============

Ülesanne põhiidee:
-------------------
laenugraafiku koostamine


Teadmised ja oskused:
-----------------------
boolean, loogilisoperaatorite kasutamine, tingimuste koostamine, String andmetüübi kasutamine ja väljundi formateerimine,
patterni kasutamine, Scanner'i kasutamine, lihtsamate tsüklite koostamine.

I. Esimese sammuna on soovitatav lõpuni täita kõige lihtsamad meetodid. Antud juhul need on staatilised boolean'id.

Nagu Te näete mallis, on juba olemas valmis konstandid - Java keeles neid tähistatakse **static final**,
konstandi nimi on tavaliselt nn. *upper case*'is sõnad, mis on eraldatud *underscore* sümboliga. 

.. code-block:: java

    public static final double MIN_LOAN_AMOUNT = 1000;

    public static final double MAX_LOAN_AMOUNT = 10_000;
    
    
    
Kuna Teile on antud kõik konstandid, on soovitatav need kasutada boolean meetodites.
Kui Teil on lihtsamad meetodid valmis, siis võite neid kasutada komplekssemates meetodites.
Teil ei tule siis välja niimoodi, et Te kasutate sarnast koodi mitmetes meetodites.
Nagu olete varem kuulnud sellist nõuet: *"Never repeat yourself"*.
See juurdeminek iga programmeerimisülesannele on kõige loogilisem.
 
Näiteks siin:
 
.. code-block:: java

   public static boolean isValidLoanAmount(double amount) {

        return amount >= MIN_LOAN_AMOUNT && amount <= MAX_LOAN_AMOUNT;

   }

 
Ka pange tähele, et kui Teil on olemas võimalus return lausel kõik panna ühele lausele, see on hea: koodi on lihtne lugeda ja vajadusel täita.

Täitke need meetodid kasutades olemasolevaid konstante:
public static boolean isValidLoanAmount(double amount)
public static boolean isValidInterestRate(double yearlyRate)
public static boolean isValidLoanPeriod(double years)

II. public static String repeat(String s, int count) meetod

Teil on vaja luua meetodit, mis kordab kirjet (String s) mitut (count) korda.
Isegi kui Te algusel ei tea, kuidas meetodit täita nii, et ta teeks oma tööd,
Te juba teate, mil juhul ei saa kirjet korrata:
a) kui String s on null objekt: return null
b) kui String s on tühi string: return tühi string
c) kui count muutuja väärtus on negatiivne: ei saa negatiivset arvu kordi midagi korrata

Nüüd räägime sellest, kuidas stringi korrata. Seda saab teha ühe reana:

.. code-block:: java

   String.join("", Collections.nCopies(count, s));

Kasutate *Collections* framework'i.
Java keel on hea selles mõttes, et on juba olemas palju valmis asju, et neid kasutada.
*Don't invent a bicycle again!*

Kõik kokku:

.. code-block:: java

    public static String repeat(String s, int count) {
        try {
            if (s.isEmpty() || count < 0) {
                return "";

            } else {
                return String.join("", Collections.nCopies(count, s));

            }

        } catch (NullPointerException n) {
            return "";

        }

    }


III. public static void printSeparator() meetod
Nagu juba mainisin: ärge korrake ennast! Teil on paar asju juva valmis.
Teil on olemas repeat() meetod, Teil on olemas staatiline konstant TABLE_WIDTH.
Tuleb ainult 1 rida koodi:


*System.out.println(repeat("-", TABLE_WIDTH));*

IV. public static void printRow ja public static void printBottomRow meetodid

Iga rida peaks olema piisavalt lai et mahuks maksimaalselt võimalik väärtus.Tulpide laiused on 7-8-12-16-8. Tulbid on eraldatud tühikutega.

.. code-block:: java

    public static void printRow(YearMonth currentDate, double amountLeft, double monthlyPayment, double interestPayment) {

        System.out.printf("%-7s %-8.2f %-12.2f %-16.2f %-8.2f\n", monthAndYearStringFrom(currentDate) , amountLeft ,
                monthlyPayment , interestPayment, interestPayment + monthlyPayment);

    }
   
*System.out.printf* kaudu saab formateerida numbrilist väljundit. Kui panete tähele, siis näete, et pärast punkti tuleb 2f, näiteks siin:
%-8.2f

See tähendab, et laius on 8 tühikut, .2f annab väljundiks formateeritud arvu kahe numbriga pärast koomat, nagu nõutakse ülesannes.

Analoogselt saab kirjutada printBottomRow meetodit:
   
   
.. code-block:: java
   
    public static void printBottomRow(double loanAmount, double interestCost) {
        System.out.printf("%-7s %-8s %-12.2f %-16.2f %-8.2f\n", " ", "Total", loanAmount, interestCost, loanAmount + interestCost);

    }

IV. Laenu väljamaksmise plaan

.. code-block:: java

    public static void printFixedPaymentPlan(double loanAmount, double period, double yearlyInterestRate) {
            
            // Kontrollime, kas sisendid on korrektsete väärtustega:

        if (isValidLoanAmount(loanAmount) && isValidLoanPeriod(period) && isValidInterestRate(yearlyInterestRate)) {

            printTopRow();
            printSeparator();
            
            // The interest payment for a given month depends on the
            // monthly interest percentage (rate / 100 / 12) and the amount left to pay:
            // Interest payment = interest percent * amount
            
            double months = period * MONTHS_IN_YEAR;
            double monthlyPayment = loanAmount / months;
            double interestPayment = yearlyInterestRate * monthlyPayment / MAX_INTEREST_RATE;

            double deltaInterest = interestPayment / months;
            
            // Siin paneme kirja read sõltudes intressi määrast, maksmise kuude arvust ja muudest parameetritest:

            for (int i = 0; i < months; i++) {
                printRow(nextMonth(currentDate()).plusMonths(i), loanAmount,
                        monthlyPayment, interestPayment);

                loanAmount -= monthlyPayment;
                interestPayment -= deltaInterest;

            }

            printSeparator();
            
            // Siin arvutame ümber, kui palju laenu on jäänud, intressi määru ka tuleb arvutada sõltudes perioodist hetkel

            for (int j = 0; j <= months; j++) {
                loanAmount += monthlyPayment;
                interestPayment += deltaInterest * j;

            }
            
            printBottomRow(loanAmount - monthlyPayment, interestPayment * yearlyInterestRate);

        }

    }

V. Programmi käivitamine, sisendi lugemine ja väljundi kirjutamine
Kui käivitame programmi, siis toimuvad järgmised protsessid samm-sammult:


1. Scanneri initsieerimine:
Scanner scanner = new Scanner(System.in).useDelimiter("[\\n]+");
- useDelimiter("[\\n]+") on siin selleks, et tühik oleks kontrollitud nagu sisend, mis meie juhul ei sobi.

2. Küsime sisendi: esiteks küsime laenu summa, teiseks küsime väljamaskmise perioodi, viimaseks küsime intreessimäära.

3. Kontrollime sisendi formaati: kui formaat on õige, muutujale omandatakse sisestatud väärtust, muidu kasutajalt kõsitakse sisendit uuesti snei kuni see on sbova formaadiga

4. Kontrollime sisendi väärtuse õigust vastaselt nõuetele, kui andmed ei ole õiged, küsime veelkord

.. code-block:: java

    public static void main(String[] args) {
        double amount = -1;
        double period = -1;
        double interest = -1;

        try (Scanner scanner = new Scanner(System.in).useDelimiter("[\\n]+")) {
            
            while (true) {
                System.out.println("Amount:\n");
                if (!scanner.hasNext()) {
                    System.out.println("Bye!");
                    break;
                }


                if (scanner.hasNextDouble()) {

                    amount = scanner.nextDouble();

                    if (isValidLoanAmount(amount)) {

                        break;
                    } else {
                        System.out.println("Illegal amount!");
                    }

                } else {
                    System.out.println("Amount again:\n");
                    String temporary = scanner.next();
                    System.out.println("Not a number! Got: " + temporary);

                }


            }

            /**
            * Siin tuleb veel paar analoogset while-tsükli laenu perioodi ja intressimäära väärtuste kontrolliks
            **/
           

           
        }

            printFixedPaymentPlan(amount, period, interest);
            System.out.println();

    }


 