EX12 - rekursiivne otsing
=========================

Sissejuhatus
------------

Ülesandeks on realiseerida meetod *public static int find(String where, String what)*, mis otsib sõnes *where* sõne *what* ja tagastab esimest positsiooni (index), kus sõne *what* paikneb. Juhul, kui sõnes *where* ei ole sõne *what*, siis tagastada -1. Kui otsitav sõne on tühi, siis tagastada 0.

Lahendus peab olema rekursiivne, mis tähendab, et meie meetod peab kutsuma ise ennast välja:

.. code-block:: java

	public static int find(String where, String what) {
		...
		... find(strA, strB); // strA ja strB on String tüübi muutujad.
		...
	}

Tsükleid (loop'e) kasutada ei tohi! (Eeldatakse, et me oskame tsükleid asendada rekursiooniga.)

Tuleb meeles pidada, et sõnes on igal sümbolil oma indeks. Indeksi lugemine algab 0-ga.

.. code-block:: console

	"Tere!"
	"01234"

	" Hello "
	"0123456"

.. code-block:: console

	Näited:
	find("abc", "ab") => 0
	find("abc", "bc") => 1
	find("   tere   ", "e") => 4
	find("i'm empty", "HM") => -1
	find("aba", "a") => 0

Meetodid
--------

Selles ülesandes on lubatud kasutada vaid järgmiseid meetodeid:

* str.equals(String str2)

Kontrollib, kas muutujad str ja str2 on sisuliselt võrdsed. 
Kui jah, siis tagastab true, muul juhul tagastab false.

.. code-block:: console

	Näiteks:
	1. "abc".equals("abc") => true
	2. Olgu String str = "tere", str2 = "tere!". Siis str.equals(str2) => false

* str.length()

Tagastab sõne pikkust.

.. code-block:: console

	Näiteks:
	1. Olgu String str = "abc". Siis str.length() => 3
	2. "".length() => 0 (str.isEmpty() => true)

* str.substring(int startindex)

Võtab ja tagastab sõnest *str* alamsõne, mis algab positsioonist *startindex*.
*Lihtsamas keeles võiks öelda, et ta võtab *startindex* sümbolist sõne algusest ära*
NB! See meetod viskab IndexOutOfBoundsException juhul, kui sellist positsiooni sõnes ei leidu!

.. code-block:: console

	Näiteks:
	1. "Tere".substring(1) => "ere"
	2. "   hey".substring(3) => "hey"
	3. Olgu String str = "Ex12". Siis str.substring(0) => "Ex12"
	4. "".substring(1) => IndexOutOfBoundsException

* str.substring(int startindex, int endindex)

Võtab ja tagastab sõnest *str* alamsõne, mis algab positsioonist *startindex* ja lõpeb enne positsiooni *endindex*. Matemaatilises keeles: [startindex; endindex)
**NB! See meetod viskab IndexOutOfBoundsException juhul, kui sellist positsiooni sõnes ei leidu!**

.. code-block:: console

	Näiteks:
	1. "Tere".substring(1, 2) => "e"
	2. "   hey".substring(3, 5) => "he"
	3. Olgu String str = "Ex12". Siis str.substring(0, 0) => ""
	4. "aa".substring(1, 4) => IndexOutOfBoundsException

* str.charAt(int pos) 

**Tagastab Character tüübi väärtust!** Tagastab sümbolit, mis asub positsioonil *pos*.
**NB! See meetod viskab IndexOutOfBoundsException juhul, kui sellist positsiooni sõnes ei leidu!**

.. code-block:: console

	Näiteks:
	1. "abc".charAt(1) => 'b'
	2. "  ".charAt(0) => ' '
	3. " ".charAt(2) => IndexOutOfBoundsException

* str.startsWith(String str2) 

Tagastab true, kui sõne *str* alguses on sõne *str2*, muul juhul tagastab false.

.. code-block:: console

	1. "tere".startsWith("tere") => true
	2. Olgu String abc = "abc". Siis abc.startsWith("ab") => true.
	3. Olgu String abc = "def". Siis abc.startsWith("ef") => false.
	4. Olgu String abc = "def". Siis abc.startsWith("tere") => false.

Lahendus:
---------

Rekursiooni kasutades tuleb meetodis määrata tingimusi, kui rekursiooni ei pea kasutama, muidu meetod hakkab kutsuma ise ennast välja lõpmatult palju ja see tekitab StackOverFlowError'i.

| Meil tuleb leida olukordi, kui me saame vastust kohe anda.
| Vaatame korraga võimalikud olukorrad läbi:
| 1. Kui otsitav sõne (what) on tühi. Siis pole vaja midagi muud teha, kui lihtsalt tagastada 0. (Ülesande eelduse järgi)
| 2. Kui otsitav sõne pole tühi:
| 2.1. Kui *where* on tühi. (nt. where => "", what => "a") Sel juhul on arusaadav, et sõnest *where* kunagi ei leidu sõne *what*. Selle kohta on ülesandes öeldud, et tuleb tagastada -1.
| 2.2. Kui *where* pole tühi.
| 2.2.1. Kui sõne *what* pikkus on suurem, kui sõnel *where*. Siin on analoogiline situatsioon punktiga 2.1. Tagastame -1.
| 2.2.2. Kui sõne *what* pikkus ei ole suurem, kui sõnel *where*. Sel juhul ei saa anda täpset vastust ja tuleb edasi uurida.

| Punktid nr 1, 2.1, 2.2 on lihtsad ja saame nendest koodi kirjutada.
| Punkt 1. *what* on tühi, tagastame 0.
| Javas on hea meetod isEmpty(), mis teatab, kas sõne on tühi või mitte. Meetodit kutsutakse isendist (String tüübi muutujast). 
| Olgu String str = "". Siis str.isEmpty() => true. "Abc".isEmpty() => false.
| 
| Meie ülesandes:

.. code-block:: java

	if (what.isEmpty()) {
		return 0;
	}

**Edaspidi koodi kirjutades oleme kindel, et *what* ei ole tühi!**

Punkt 2.1. *where* on tühi, tagastame -1.

.. code-block:: java

	if (where.isEmpty()) {
		return -1;
	}

| Punkt 2.2.1. *where* on lühem, kui *what*, tagastame -1.
| Siin võiks punktist 2.1 koodi täiendada. 

.. code-block:: java

	if (where.length() < what.length()) {
		return -1;
	}

NB! Kui sõne on tühi, siis tema pikkus on 0. Ning kui *what* pole tühi ja *where* on tühi, siis see tingimus ka täitub. Seega punktis 2.1 pole mõtet ja selle punkti koodi võib ära jätta.

| Nüüd oleme jõudnud punkti 2.2.2. juurde. Nüüd me teame, et:
| 1. *what* ei ole tühi.
| 2. *where* ei ole tühi.
| 3. *what* on lühem kui *where*.
| 
| (Teiste juhtude puhul oleme juba midagi tagastanud.)

.. code-block:: console

	Näited:
	1. where => "abc" what => "a"
	2. where => "abc" what => "b"
	3. where => "abc" what => "d"

| Selles ja sarnastes ülesannetes võiks kasutada sellist algoritmi:
| 1. Jaga sõne kaheks osaks.
| 2. Vaata, kas esimene osa täidab vajalikku nõuet. 
| Kui jah, siis tagasta tulemus. 
| Kui ei, siis uuri teist osa selle algoritmi järgi veel kord (rekursioon).

| Proovime seda algoritmi kasutada meie ülesandes:
| 1. Jagame sõne kaheks osaks. Millised peavad need osad olema?
| Sõne *what* võib olla sõne *where* alguses. Seega on mõistlik jagada nii, et esimene osa on sama pikkusega nagu otsitav sõne *what*. Siis vaatame, kui esimene osa ja *what* on sisuliselt võrdsed, siis tagastame 0.

.. code-block:: java

	String first = where.substring(0, what.length()); // algoritmi punkt 1
	if (first.equals(what)) { // algoritmi punkt 2
		return 0;
	}

Näiteks where => "hello", what = "he"

.. code-block:: java

	String first = where.substring(0, what.length()); // first => "he"
	if (first.equals(what)) { // "he".equals("he") => true
		return 0;
	}

See kood tegelikult teeb sama asja, kui meetod startsWith. Selle meetodiga näeb see kood niimoodi välja:

.. code-block:: java

	if (where.startsWith(what)) {
		return 0;
	}

| Aga kui *what* pole *where* alguses? (nt. where => "hello", what => "el")
| Iteratiivselt koodi mõte oleks selline:
| 1. Vaata positsiooni 0.
| 2. Vaata, kas *what* on *where* alguses. Kui jah, siis tagasta see positsioon, kui ei, siis mine edasi.
| 3. Suurenda positiooni ühe võrra.
| 4. Goto 2
| 5. Kui ikka ei leidu, siis tagasta -1.

Siiamaani teame, et *what* pole *where* alguses. Siis on vaja suurendada positiooni ühe võrra ja kontrollida uuesti. Aga see kord, sõnest on vaja esimene sümbol välja visata, muidu ta hakkab kontrollima sama sõnet lõpmatult.

Ehk siis võtame esimese sümboli ära niikaua kuni sõne leidub või sümbolid saavad otsa.
Iga alamsõne jaoks tuleb uuesti kutsuda välja meie meetodit. Iga järgmisel kutsumisel suurendame positsiooni.

.. code-block:: console

	find("hello", "o") = 1 + find("ello", "o") = 1 + 1 + find("llo", "o") = 1 + 1 + 1 + find("lo", "o") = 1 + 1 + 1 + 1 + find("o", "o") = 1 + 1 + 1 + 1 + 0 = 4

Kuidas esimest sümbolit ära visata? Selleks võiks kasutada juba mainitud meetodit *substring*.
Kui meil on String tüübi muutuja str, siis str.substring(1) ongi str ilma esimese sümbolita.

find(where.substring(1), what) kunagi jõuab selleni, et *what* on *where* alguses VÕI *what* on pikem kui *where*. Nii saabki ta rekursioonist välja.

| Aga mis siis, kui funktsioon kunagi rekursioonis tagastab -1?

.. code-block:: console

	find(w, w2) => 1 + 1 + 1 + ..... + -1
	find(w, w2) peab olema siis -1, kuid on hästi näha, et nii ei tule välja.

Siin on mõistlik lisada meie koodi tungimust, et kui alamsõnes otsitav sõnu ei leidu, siis tagastada -1,
muul juhul tagastada 1 + find(alamsõne, otsitav_sõne).

Siis tuleb find(alamsõne, otsitav_sõne) panna muutujasse.

.. code-block:: java

	int f = find(where.substring(1), what);

Ja meie kontroll:

.. code-block:: java

	if (f == -1) {
		return -1;
	} else {
		return 1 + f;
	}

Tuli välja selline kood:

.. code-block:: java

	public static int find(String where, String what) {
		if (what.isEmpty()) {
			return 0;
		}
		
		if (where.length() < what.length()) {
			return -1;
		}
		
		if (where.startsWith(what)) {
			return 0;
		}
		
		int f = find(where.substring(1), what);
		
		if (f == -1) {
			return -1;
		}
		
		return 1 + f;
	}
	
.. code-block:: console

	Näide:
	I. find("hello", "ll"): where => "hello", what => "ll"
	1. what.isEmpty() => false
	2. where.length() < what.length() => false (5 < 2 => false)
	3. where.startsWith(what) => false ("he" != "ll")
	4. return 1 + find("ello", "ll")
	On vaja find("ello", "ll") arvutada:

	II. find("ello", "ll"): where => "ello", what => "ll"
	1. what.isEmpty() => false
	2. where.length() < what.length() => false (4 < 2 => false)
	3. where.startsWith(what) => false ("el" != "ll")
	4. return 1 + find("llo", "ll")
	On vaja find("llo", "ll") arvutada:

	III. find("llo", "ll"): where => "llo", what => "ll"
	1. what.isEmpty() => false
	2. where.length() < what.length() => false (3 < 2 => false)
	3. where.startsWith(what) => true ("ll" == "ll")
	4. tagastame 0. 
	find("llo", "ll") => 0. Nüüd läheme tagasi.

	II.
	4. return 1 + 0
	find("ello", "ll") => 1. Nüüd läheme tagasi.

	I.
	4. return 1 + 1
	find("hello", "ll") => 2 <= Vastus

.. code-block:: console

	Näide 2.
	I. find("abc", "d"): where => "abc", what => "d"
	1. what.isEmpty() => "d".isEmpty() => false
	2. where.length() < what.length() => 3 < 1 => false
	3. where.startsWith(what) => "abc".startsWith("d") => false
	4. int f = find(where.substring(1), what) => find("bc", "d")
		II. find("bc", "d"): where => "bc", what => "d"
		4.1. what.isEmpty() => "d".isEmpty() => false
		4.2. where.length() < what.length() => 2 < 1 => false
		4.3. where.startsWith(what) => "bc".startsWith("d") => false
		4.4. int f = find(where.substring(1), what) => find("c", "d")
			III. find("c", "d"): where => "c", what => "d"
			4.4.1. what.isEmpty() => "d".isEmpty() => false
			4.4.2. where.length() < what.length() => 1 < 1 => false
			4.4.3. where.startsWith(what) => "c".startsWith("d") => false
			4.4.4. int f = find(where.substring(1), what) => find("", "d")
				IV. find("", "d"): where => "", what => "d"
				4.4.4.1. what.isEmpty() => "d".isEmpty() => false
				4.4.4.2. where.length() < what.length() => 0 < 1 => true
				4.4.4.3. return -1 find("", "d") => -1
			4.4.5. f = -1 (4.4.4.3)
			4.4.6. f == -1 => -1 == -1 => true
			4.4.7. return -1 find("c", "d") => -1
		4.5. f == -1 (4.4.7)
		4.6. f == -1 => -1 == -1 => true
		4.7. return -1 find("bc", "d") => -1
	5. f = -1 (4.7)
	6. f == -1 => -1 == -1 => true
	7. return -1 find("abc", "d") => -1

Boonusosa
---------

Tuleb kirjutada sarnane meetod *public static int rfind(String where, String what)*, kuid see meetod tagastab mitte esimest, vaid viimast positiooni, kust see sõne leidub.

.. code-block:: console

	rfind("aba", "a") => 2

| Reeglid:
| 1. Ei tohi kasutada find meetodit.
| 2. Lubatud meetodid: equals(String), length(), substring(int begin) (NB!!! substring(int begin, int end) ei tohi kasutada), charAt(int index), startsWith(String).
| 3. Võib tükeldada sõne ainult algusest.

| Siin jäävad kehtima mõned tingumused, millest me oleme juba rääkinud:
| 1. Kui *what* on tühi, tagastame 0.
| 2. Kui *where* on lühem kui *what*, tagastame -1.

Kood ise on väga sarnane funktsiooniga find, tuleb aga natuke muudatusi teha.

| Lahenduse idee:
| 1. Kontrollime 2 ülalpool mainitud tingimust.
| 2. Kui startsWith(what) on tõene, siis proovi otsida ka alamsõnadest.
| 3. Kui otsitav sõne ei leidunud alamsõnast, siis tagasta esimene positioon, muul juhul tagasta viimane positsioon.

Mis muutub meetodi *find* võrreldes?
Meil tuleb teada, kas otsitav sõne leidub alamsõnest, enne kui kontrollime, kas sõne alguses on otsitav sõne.
Kui sõne alguses on otsitav sõne, tuleb teha kontroll, kas alamsõnes leidub see sõne jälle või mitte.


.. code-block:: java

	public static int rfind(String where, String what) {
		if (what.isEmpty()) {
			return 0;
		}
		
		if (where.length() < what.length()) {
			return -1;
		}
		
		int f = find(where.substring(1), what); // enne otsime alamsõnes
		
		if (where.startsWith(what)) { // kui *what* on *where* alguses
			if (f == -1) { // *what* ei leidu alamsõnest, aga ta juba leidus sõnes
				return 0; 
			} 
			
			return n + 1; // + 1, et jätta see positsioon vahele.
		}
		
		if (f == -1) {
			return -1;
		}
		
		return 1 + f;
	}
