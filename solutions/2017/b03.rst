B03 lahendus
============

***Antud lahendamise meetod on kõige lihtsaim, ehk siin ei kasutata TreeSet või
komparaatoreid.***

Enne ülesande lahendamisega hakkamist tuleb implementeerida ette antud liidetest
(interface) meetodeid. Pärast OrderedPackageProvider klassi loomist, tuleb
lihtsalt kirjutada juurde "implements <liidese nimi>":

.. code-block:: java

    public class OrderedPackageProvider implements PackageProvider {}

Pärast seda vajutage Alt+Enter ja valige "implement methods" ning ongi kõik.

Pakette on kaks tüüpi: Package ja PremiumPackage, mis on Package alamklass. PremiumPackage klass pole ette antud,
seda tuleb luua. Konstruktoris peavad olema samad argumentid, nagu tavalisel Package-il, ja lisaks nendele ka
priority, mida tavalisel pakkil pole.

.. code-block:: java

    public PremiumPackage(int priority, String packageNumber, int width, int height) {
        this.priority = priority;
        super.packageNumber = packageNumber;
        super.width = width;
        super.height = height;
    }

Nagu on näha, ei pea looma uusi väljundid (fields) - nagu width või height - alamklassi jaoks, saab kasutada
juba olemasolevaid superklassist.

Kui see on tehtud, siis saab hakkata ülesannet lahendama.
Antud ülesandes on vaja tagastada pakkid kindlas järjekorras, lähtudes nende prioriteedist.
Ehk, teiste sõnadega, programmi tsentraalne meetod on:

.. code-block:: java

    @Override
    public Package getNextPackage() {}

Kui meil on kaks paketti - tavaline ja premium - siis esialgu tagastab meie programm premium paketti (oh really?).
Igal premium paketil on ka atribuut priority, mille järgi neid saab omavahel võrrelda. Niiet kahest premium paketist meie
meetod peab tagastama suurema prioriteediga paketti. Aga mis teha, kui prioriteedid on võrdsed?

Premium paketti korral meile on ette antud 2 prioriteedi tüüpi:

1. Üldine, mille järgi kõigepealt võrreldakse;

2. Sender + Receiver prioriteet, mille järgi võrdleme juhul, kui üldised prioriteedid on võrdsed.

Tavalistel paketidel on ainult 2. prioriteet.

Selleks, et pärast oleks lihtsam pakette sortida, võib kohe listi 
lisamise ajal neid jagada kaheks erinevaks listiks: tavalised ja premium.
Siis, meetod addPackage näeks välja:

.. code-block:: java

    @Override
    public void addPackage(Package packageToAdd) {
        if (packageToAdd instanceof PremiumPackage) {
            listOfPremiumPackages.add((PremiumPackage) packageToAdd);
        } else {
            listOfJustPackages.add(packageToAdd);
    }

Nagu näete, kuna funktsiooni argumendiks on instanss Package klassist, siis kui ta on ka 
PremiumPackage klassi instanss, on vaja teha nn kasti (cast):

.. code-block:: java

    (PremiumPackage) packageToAdd

Nüüd meil on olemas kaks listi. Mis jääbki tegema on lihtsalt tagastada
paketti kõige suurima prioriteediga. Kuidas siis teeme seda?
Kuna meil on kaks listi ja eeldus, et premium paketidel on suurem prioriteet 
kui tavalistel, esialgu vaatame, kas meil on üldse premium paketid olemas:

.. code-block:: java

    if (!listOfPremiumPackages.isEmpty()) {}

Ja kui on, siis hakkame otsima kõige suurema prioriteediga premium paketti. 

Niiet, võiks kirjutada midagi sellist:

.. code-block:: java

    @Override
    public Package getNextPackage() {
        // Muutuja paketti kõige suurima prioriteediga hoidmiseks
        Package result;
        // Muutuja prioriteetide võrdlemiseks üldprioriteedi puhul
        int initialPriority;
        // Muutuja prioriteetide võrdlemiseks lisaprioriteedi puhul
        int additionalCheck;
        // Kui meil on premiumpaketid
        if (!listOfPremiumPackages.isEmpty()) {
            for (PremiumPackage p : listOfPremiumPackages) {
                // Paketti p üldine prioriteet
                int totalPriority = p.getPriority();
                // Paketti p lisaprioriteet
                int additionalPriority = p.getSender().getPriority() + p.getReceiver().getPriority();
                
                if (totalPriority > initialPriority) {
                    result = p;
                    initialPriority = totalPriority;
                    
                // Kui üldised prioriteedid on samad ja lisaprioriteet on suurem, kui viimasel pakkil oli
                } else if (totalPriority == initialPriority && additionalPriority > additionalCheck) {
                    ... 
                    Sama asi lisaprioriteedi puhul
                    ...
                }
            }
            listOfPremiumPackages.remove(p);
        } else {
            ...
            Hakkame tsüklima tavaliste pakettide listi peal samal moel
            Kuid siin prioriteet on ainult ühte tüüpi - Sender + Receiver prioriteet
            ...
        }
        return result;
    }

Esialgu paneme paika nn initial väärtused, ehk meie juhul initialPriority ja 
additionalCheck - nende järgi me filtreerime paketid, ja kui leidub üks, mille
prioriteet on suurem, mis eelmisel oli, siis salvestame seda muutuja result
sisse. Ja siis pärast tagastame seda lihtsalt. Kui premium pakette pole, siis teeme 
põhimõtteliselt sama asja, lihtsalt sel korral pole rohkem vaja üldprioriteeti
arvestada - tavalistel pakettidel on ainult Sender + Receiver prioriteet.


***Boonusosa***

Boonusosa (OrderedPackageFilter) on väga lihtne. Nüüd oleks vaja lihtsalt kontrollida kõike 
Package klassile kuuluvaid asju. Sellest pole väga palju rääkida vaja, pakuks teha kolm
meetodit:

.. code-block:: java

    public class OrderedPackageFilter implements PackageFilter {
        // Paketti prioriteet jm kontroll
        private boolean checkPackage(Package p) {...}
        // Paketti saatja ja saaja andmete kontroll
        private boolean checkSenderAndReceiver(Package p) {...}
        // Ja siis nende kutsumine isValid() meetodi sees
        @Override
        public boolean isValid(Package p) {
            return p != null && checkPackage(p) && checkSenderAndReceiver(p);
        }
    }

Lihtne? Lihtne.




