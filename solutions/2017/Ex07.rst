EX07 lahendus.
==============

Sissejuhatus
------------

Ülesande eesmärk, on koostada õpingukava (Curriculum.java), kuhu saab aineid ja 
uurimistööd lisada. Lisaks tuleb teha sellele graafiline GUI. Ülesannde koosneb kahest osast: Rakendus ja GUI.

Rakenduse osa
-------------

**Subject**

Esimeseks tuleks luua Subject.java klass, mis on abstraktne. Abstrakne klass on klass,
mis ei tee midagi. See on kasulik, kuna Subject klass, on selles ülesandes ülemklass.
Kõik Subject klassi meetotid, peavad ka olema abstraktsed.

**ObtionalSubject, CompulsorySubject ja Thesis**

Need klassid on peaaegu identsed. Kõige pealt tuleb klassi loomisel neid extendida ehk 
muuta neid alamklassideks. Alamklass pärib oma omadused ülemklassilt. Nendes meetodites
on natuke erinevad muutujad, aga need saab konstruktori järgi määrata. Kindlasti tuleb
konstruktoris kontrollida, et EAP-d ei oleks negatiivsed; kui nad on, tuleb nad 0-iks
panna.

.. code-block:: java

	public class OptionalSubject extends Subject

Lisaks tuleb alamklassides Overrideda ülemklassi meetotid, et neid saaks välja kutsuda:

.. code-block:: java

	  @Override
    public int getEap() {
        return this.eap;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public String getCode() {
        return this.code;
    }


**Curriculum**

Curriculum on selle ülesande põhiosa. Curriculumis oleks soovituslik teha 3 Listi, mis
hoiaksid Subject-e: üks OptionalSubjectite jaoks, teine CompulsorySubjectite jaoks ja
kolmas, mis hoiab kõiki Subjecte.
AddSubject meetod, on selle ülesande põhiline meetod. Selle meetodi ainuke input on
Subject, aga me peame eristama sellest alamklassid, et me saaksime neid listidesse panna.
Kõige lihtsam viis selle jaoks, on kontrollida, kas subject on mõne alamklassi instance.

.. code-block:: java

	if (subject instanceof OptionalSubject) {
		optionalSubjects.add((OptionalSubject) subject);
        }


Lisaks tuleb kontrollida, kas Thesis on juba olemas, kui ei ole lisatakse ta Curriculumi,
kui on, siis tuleb vana ära kustutada ja uus asemele panna.

.. code-block:: java

	if (subject instanceof Thesis) {
            if (subjects.contains(thesis)) {
                subjects.remove(thesis);
            }
            this.thesis = (Thesis) subject;
            this.thesis.setEap(this.thesisEap);
        }

Viimaseks tuleb vaadata, kas Curriculum on valmis. Curriculum on valmis, kui 
Compulsory- ja OptinalSubjectite EAP-d annavad kokku konstruktoris ette antud koguse.

Seda on kõige kergem teha, käies läbi OptinalSubjecti ja CompulsorySubjecti listid:

.. code-block:: java

	int compulsoryEap = 0;
	for (CompulsorySubject compulsorySubject : compulsorySubjects) {
            compulsoryEap += compulsorySubject.getEap();
        }

Pärast seda tuleks kontrollida, kas vajalikud EAP-d on täis ja kas Thesis on olemas,
kui mõlemad need kontrollid on tehtud, ongi ülesanne lahendatud.


GUI osa
-------

Gui osa on tehtud SceneBuilderiga. Tuleb teha eraldi JavaFXapplication, kus käivitatakse 
SceneBuidleri loodud fxml fail.

.. code-block:: java

  FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("curriculum.fxml"));
        Parent root = fxmlLoader.load();
        primaryStage.setScene(new Scene(root, xCoords, yCoords));
        primaryStage.show();


Lisaks tuleb luua tavaline java fail, mis hakkab fxml faili controlleriks, ehk failiks
kus saab gui-ga suhelda. Üks viis on kasutada TextFielde, et saada rakendusest tekst kätte.

.. code-block:: java

  public void saveCur() {
    curriculum = new Curriculum(Integer.parseInt(curReqCom.getText()),
                  Integer.parseInt(curReqOpt.getText()), Integer.parseInt(curThesis.getText()));
  }
  
  
Analoogselt luuakse ka subjecte. Pärast igat aine lisamist, kontrollitakse, kas õppekava on
valmis ja arvutatakse EAPde kogus. 


.. image:: ../../images/ex09.png
  



